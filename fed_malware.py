#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Python version: 3.6

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import copy
import numpy as np
from torchvision import datasets, transforms
import torch
import csv

from utils.sampling import mnist_iid, mnist_noniid, cifar_iid, virusshare_117_iid_random
from utils.options import args_parser
from models.Update import LocalUpdate
from models.Nets import MLP, CNNMnist, CNNCifar, CNNModel
from models.Fed import FedAvg, Krum, MultiKrum, Median_Krum
from models.test import test_img
from torch.utils.data import Dataset

# HE Library
from phe import paillier
import tenseal as ts

import time

start_time = time.time()


class FixedRandomFlipDataset(Dataset):
    def __init__(self, original_dataset, flip_prob, num_classes):
        self.original_dataset = original_dataset
        self.flip_prob = flip_prob  # 翻轉機率，例如 0.1 表示 10%
        self.num_classes = num_classes
        # 預先決定哪些樣本要翻轉
        self.flip_indices = np.random.rand(len(original_dataset)) < self.flip_prob

    def __len__(self):
        return len(self.original_dataset)

    def __getitem__(self, idx):
        data, label = self.original_dataset[idx]
        if self.flip_indices[idx]:
            possible_labels = list(range(self.num_classes))
            possible_labels.remove(label)
            label = np.random.choice(possible_labels)
        return data, label


def Choose_dataset():
    if args.dataset == 'virusshare_177_dynamic':  # select virusshare_177
        train_dir = './data/virusshare_177_8_class_dynamic_split/train'
        test_dir = './data/virusshare_177_8_class_dynamic_split/test'
        trans_virusshare_177 = transforms.Compose([transforms.Resize((224, 224)), transforms.ToTensor(),
                                                   transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])])
        dataset_train = datasets.ImageFolder(train_dir, transform=trans_virusshare_177)
        dataset_test = datasets.ImageFolder(test_dir, transform=trans_virusshare_177)
        if args.iid:
            dict_users = virusshare_117_iid_random(dataset_train, args.num_users)
        else:
            exit('Error: only consider IID setting in virusshare_177_dynamic')
    elif args.dataset == 'mnist':  # select mnist dataset
        trans_mnist = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))])
        dataset_train = datasets.MNIST('../data/mnist/', train=True, download=True, transform=trans_mnist)
        dataset_test = datasets.MNIST('../data/mnist/', train=False, download=True, transform=trans_mnist)
        # sample users , decide iid or non-iid
        if args.iid:
            dict_users = mnist_iid(dataset_train, args.num_users)
        else:
            dict_users = mnist_noniid(dataset_train, args.num_users)
    elif args.dataset == 'cifar':  # select cifar dataset
        trans_cifar = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])
        dataset_train = datasets.CIFAR10('../data/cifar', train=True, download=True, transform=trans_cifar)
        dataset_test = datasets.CIFAR10('../data/cifar', train=False, download=True, transform=trans_cifar)
        if args.iid:
            dict_users = cifar_iid(dataset_train, args.num_users)
        else:
            exit('Error: only consider IID setting in CIFAR10')
    else:
        exit('Error: unrecognized dataset')

    return dataset_train, dataset_test, dict_users


def save_to_csv(file_name, data):
    # Append data to the specified CSV file
    with open(file_name, mode='a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(data)

def decrypt_grad(encrypted_grad, private_key, original_shapes, scale=1e6, encoding_space=2**32):   
    decrypted_grad = {}
    
    for key, encrypted_values in encrypted_grad.items():
        # 1. 解密加密的梯度值
        decrypted_values = [private_key.decrypt(value) % encoding_space for value in encrypted_values]
        
        # 2. 解碼正負數
        decoded_values = np.where(
            np.array(decrypted_values) < encoding_space // 2,
            np.array(decrypted_values),  # 正數保持不變
            np.array(decrypted_values) - encoding_space  # 負數還原
        )
        
        # 3. 還原為浮點數
        float_values = decoded_values / scale
        
        # 4. 根據原始形狀還原
        if key in original_shapes:
            shape = original_shapes[key]
            reshaped_values = float_values.reshape(shape)
        else:
            raise KeyError(f"找不到梯度 {key} 的原始形狀，無法還原。")
        
        # 5. 將 NumPy 陣列轉換為 PyTorch 張量
        decrypted_grad[key] = torch.tensor(reshaped_values, dtype=torch.float32)
    
    return decrypted_grad



def Sum_encrypted_grads(g_locals):

    if not g_locals:
        raise ValueError("g_locals 為空，無法進行加總。")

    # 初始化 sum_encrypt_grad 為 g_locals 的第一個梯度
    sum_encrypt_grad = {}
    for key in g_locals[0]:
        # 初始化每個 key 的加密值為 0
        sum_encrypt_grad[key] = g_locals[0][key]

    # 遍歷剩餘的梯度，逐元素相加
    for grad in g_locals[1:]:
        for key in grad:
            sum_encrypt_grad[key] = [
                sum_val + grad_val
                for sum_val, grad_val in zip(sum_encrypt_grad[key], grad[key])
            ]

    return sum_encrypt_grad



if __name__ == '__main__':

    # generate keys pair
    public_key, private_key = paillier.generate_paillier_keypair(n_length=256)
    

    # parse args
    args = args_parser()
    args.device = torch.device('cuda:{}'.format(args.gpu) if torch.cuda.is_available() and args.gpu != -1 else 'cpu')

    # load dataset and split users
    dataset_train, dataset_test, dict_users = Choose_dataset()

    img_size = dataset_train[0][0].shape

    # build model
    if args.model == 'cnn' and args.dataset == 'cifar':
        net_glob = CNNCifar(args=args).to(args.device)
    elif args.model == 'cnn' and args.dataset == 'mnist':
        net_glob = CNNMnist(args=args).to(args.device)
    elif args.model == 'cnn' and args.dataset == 'virusshare_177_dynamic':
        net_glob = CNNModel(args=args).to(args.device)
    elif args.model == 'mlp':
        len_in = 1
        for x in img_size:
            len_in *= x
        net_glob = MLP(dim_in=len_in, dim_hidden=200, dim_out=args.num_classes).to(args.device)
    else:
        exit('Error: unrecognized model')
    print(net_glob)
    net_glob.train()

    # copy weights
    w_glob = net_glob.state_dict()

    # training
    loss_train = []
    cv_loss, cv_acc = [], []
    val_loss_pre, counter = 0, 0
    net_best = None
    best_loss = None
    val_acc_list, net_list = [], []

    # select the ID of the malicious client
    if args.num_attack_clients > 0:
        malicious_clients = np.random.choice(range(args.num_users), args.num_attack_clients, replace=False)
        print("惡意 client 的 ID:", malicious_clients)
    else:
        malicious_clients = []

    if args.all_clients:
        print("Aggregation over all clients")
        w_locals = [w_glob for i in range(args.num_users)]
        g_locals = []
        noise_locals = []
    for iter in range(args.epochs):
        loss_locals = []
        if not args.all_clients:
            w_locals = []
            g_locals = []
            noise_locals = []
        m = max(int(args.frac * args.num_users), 1)
        idxs_users = np.random.choice(range(args.num_users), m, replace=False)
        for idx in idxs_users:
            if idx in malicious_clients:
                malicious_dataset = FixedRandomFlipDataset(dataset_train, flip_prob=1.0, num_classes=args.num_classes)
                local = LocalUpdate(args=args, dataset=malicious_dataset, idxs=dict_users[idx], public_key=public_key, private_key=private_key)
            else:
                print( 'Client ', idx, 'start :')
                local = LocalUpdate(args=args, dataset=dataset_train, idxs=dict_users[idx], public_key=public_key, private_key=private_key)
                

            encrypted_grad, loss = local.train(net=copy.deepcopy(net_glob).to(args.device))            
            g_locals.append(copy.deepcopy(encrypted_grad))
            loss_locals.append(copy.deepcopy(loss))

        
        print( 'Server start to sum all the encrypted gradients')
        sum_encrypted_grads = Sum_encrypted_grads(g_locals)
        print( 'Finishing')        
        original_shapes = {name: tensor.shape for name, tensor in w_glob.items()}

        print( 'Clients start to decrypt the encrypted gradient')
        grad_glob = decrypt_grad( sum_encrypted_grads, private_key, original_shapes) 
        print( 'Finishing')
        #grad_glob = FedAvg(g_locals)
        for i in grad_glob:
            # 確保 grad_glob[i] 在同一設備上
            grad_glob[i] = grad_glob[i].to(args.device)
            w_glob[i] = w_glob[i] - 0.01 * (grad_glob[i] / len(g_locals))
        net_glob.load_state_dict(w_glob)

        loss_avg = sum(loss_locals) / len(loss_locals)
        print('Round {:3d}, Average loss {:.3f}'.format(iter, loss_avg))

    # plot loss curve
    plt.figure()
    plt.plot(range(len(loss_train)), loss_train)
    plt.ylabel('train_loss')
    plt.savefig('./save/fed_{}_{}_{}_C{}_iid{}.png'.format(args.dataset, args.model, args.epochs, args.frac, args.iid))

    # testing
    net_glob.eval()
    acc_train, loss_train = test_img(net_glob, dataset_train, args)
    acc_test, loss_test = test_img(net_glob, dataset_test, args)
    print("Training accuracy: {:.2f}".format(acc_train))
    print("Testing accuracy: {:.2f}".format(acc_test))
    save_to_csv(args.accuracy_csv_name, [acc_test.item()])

end_time = time.time()

execution_time = end_time - start_time
print("程式執行時間為：", execution_time, "秒")
